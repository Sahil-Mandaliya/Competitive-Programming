ll LongestPalSubsequence(string s) {
    /*
     * Write your code here.
     */
    ll n=s.length();
    ll ml=1;
    ll dp1[n+7],dp2[n+7];
    memset(dp1,0,sizeof(dp1));
    memset(dp2,0,sizeof(dp2));
    ll i,j;
    for(i=n-1;i>=0;i--)
    {
        ll bcup=0;
        for(j=i;j<n;j++)
        {
            if(i==j)
            {
                dp1[i]=1;
            }
            else if(s[i]==s[j])
            {
                ll t=dp1[j];
                dp1[j]=bcup+2;
                bcup=t;
            }
            else
            {
                bcup=dp1[j];
                dp1[j]=max(dp1[j],dp1[j-1]);
            }
        }
    }
    reverse(s.begin(),s.end());
    for(i=n-1;i>=0;i--)
    {
        ll bcup=0;
        for(j=i;j<n;j++)
        {
            if(i==j)
            {
                dp2[i]=1;
            }
            else if(s[i]==s[j])
            {
                ll t=dp2[j];
                dp2[j]=bcup+2;
                bcup=t;
            }
            else
            {
                bcup=dp2[j];
                dp2[j]=max(dp2[j],dp2[j-1]);
            }
        }
    }
    for(i=0;i<n;i++)
    {
        cout<<dp1[i]<<" ";
    }
    cout<<endl;
    for(i=0;i<n;i++)
    {
        cout<<dp2[i]<<" ";
    }
    cout<<endl;
    ll mx=0;
    for(i=0;i<n-1;i++)
    {
        mx=max(mx,dp1[i]*dp2[n-2-i]);
    }
    return mx;
}
