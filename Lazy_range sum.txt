#include <bits/stdc++.h>
#define lson rt << 1
#define rson rt << 1 | 1
using namespace std;
#define ll long long
const int maxn = 1e5;
int pos[maxn + 11];
int lazy[4 * maxn + 11],seg[4 * maxn + 11];
void build(ll l,ll r,vector<ll> v,ll pos)
{
    if(l>r)
    {
        return ;
    }
    if(l==r)
    {
        seg[pos]=v[l];
        return ;
    }
    ll m=(l+r)/2;
     build(l,m,v,2*pos);
     build(m+1,r,v,2*pos+1);
    //cout<<pos<<endl;
    seg[pos]=seg[2*pos]+seg[2*pos+1];
}
void update(ll l,ll r,ll start,ll end,ll val,ll pos)
{
    if(l>r)
        return;
    if(lazy[pos]!=0)
    {
        seg[pos]+=(r-l+1)*lazy[pos];
        if(l!=r)
        {
            lazy[2*pos]+=lazy[pos];
            lazy[2*pos+1]+=lazy[pos];
        }
        lazy[pos]=0;
        
    }
    //cout<<start<<" "<<<<" "<<end<<" "
    if(start>r||end<l)
    {
        return;
    }
    if(start<=l&&end>=r)
    {
        seg[pos]+=(r-l+1)*val;
        if(l!=r)
        {
            lazy[2*pos]+=val;
            lazy[2*pos+1]+=val;
        }
        return ;
    }
    ll mid=(l+r)/2;
    update(l,mid,start,end,val,2*pos);
    update(mid+1,r,start,end,val,2*pos+1);
    seg[pos]=seg[2*pos]+seg[2*pos+1];
}
ll query(ll l,ll r,ll start,ll end,ll pos)
{
    if(l>r)return 0;
    if(start>r||end<l) return 0;
    if(lazy[pos]!=0)
    {
        seg[pos]+=(r-l+1)*lazy[pos];
        if(l!=r)
        {
            lazy[2*pos]+=lazy[pos];
            lazy[2*pos+1]+=lazy[pos];
        }
        lazy[pos]=0;
    }
    if(start<=l&&end>=r)
    {
        return seg[pos];
    }
    ll mid=(l+r)/2;
    ll p1=query(l,mid,start,end,2*pos);
    ll p2=query(mid+1,r,start,end,2*pos+1);
    return p1+p2;
}
int main()
{
	ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
	int n;
	cin >> n;
	ll i,j,k;
	vector<ll> a(n+1);
	a[0]=0;
    for(i=1;i<=n;i++)
    {
        cin>>a[i];
     }
    build(1,n,a,1);
    // for(i=1;i<20;i++)
    // {
    //     cout<<seg[i]<<" ";
    // }
    // cout<<endl;
	ll m;
	cin>>m;
	for(i=0;i<m;i++)
	{
	    ll p,l,r,v;
	    cin>>p;
	    if(p==1)
	    {
	        cin>>l>>r>>v;
	        update(1,n,l,r,v,1);
	       // for(ll i=1;i<=20;i++)
	       // {
	       //     cout<<seg[i]<<" ";
	       // }
	       // cout<<endl;
	       // for(ll i=1;i<=20;i++)
	       // {
	       //     cout<<lazy[i]<<" ";
	       // }
	       // cout<<"lllllllllllllllllllllllllll"<<endl;
	    }
	    else
	    {
	        cin>>l>>r;
	        cout<<query(1,n,l,r,1)<<" ";
	    }
	}
}
