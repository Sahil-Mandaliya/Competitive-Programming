
#include <bits/stdc++.h>
#define ll long long
#define endl '\n'
#define pii pair<ll,ll>
using namespace std;
#define N 200007
#define pb push_back;
#define FAST ios_base::sync_with_stdio(false); cin.tie(NULL);
vector<ll> g[N];
vector<ll> d(N);
vector<ll> lvl(N);
vector<ll> par(N);
vector<ll> P(N);
void traverse(ll node , ll head ,ll prev_section)
{
    /*head stores the node that is in the same level as the current node
    And is its ancestor*/
    ll current_section =  sqrt(lvl[node]) + 1; 
    if(current_section == 1)
    {
        P[node] = 1 ; 
    }
    else
    {
        if(current_section == prev_section + 1)
        {
            P[node] = par[node] ; 
            head = node ; 
        }
        else
        {
            P[node] = par[head] ; 
        }
    }
    for(ll i = 0 ; i < g[node].size() ; ++i)
    {
        if(g[node][i] != par[node])
        {
            traverse(g[node][i] ,head ,current_section) ; 
        }
    }
}
ll lca(ll x,ll y)
{
     while(P[x] != P[y])
     {
        if(lvl[x] > lvl[y])
        {
            x = P[x];
        }
        else
        {
            y = P[y]; 
        }
    }
    while(x!=y)
    {
        if(lvl[x]>lvl[y])
        {
            x=par[x];
        }
        else
        {
            y=par[y];
        }
    }
    return x;
}
int main()
{
    FAST;
    ll n,x,y,z,w,i;
    cin>>n;
    d[1]=0;
    lvl[1]=0;
    par[1]=-1;
    vector<pii> qry; 
    while(n--)
    {
        cin>>x;
        if(x==1)
        {
            cin>>y>>z>>w;
            g[y].push_back(z);
            g[z].push_back(y);
            lvl[z]=lvl[y]+1;
            par[z]=y;
            d[z]=d[y]+w;  
        }
        else
        {
            cin>>y>>z;
            qry.push_back(make_pair(y,z));
        }
    }
    traverse(1,1,0);
    ll sz=qry.size();
    for(i=0;i<sz;i++)
    {
        ll x,y;
        x=qry[i].first;
        y=qry[i].second;
        ll lcca=lca(x,y);
        cout<<d[x]+d[y]-2*d[lcca]<<endl;
    }
}