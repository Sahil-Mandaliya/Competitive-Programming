1) Unbounded Knapsack

Given weights(W) and values(P) of N items, 
put these items in a knapsack of capacity W to get the maximum total value in the knapsack. 
In other words, given two integer arrays W[0..N-1] and P[0..N-1] which represent weights and prices associated with N items respectively. 
Also given an integer W which represents knapsack capacity, 
find out the maximum value subset of Problem[] such that the sum of the weights of this subset is smaller than or equal to W. 
You cannot break an item, either pick the complete item or donâ€™t pick it (0-1 property). can pick item multiple times

W = weight list
P = price list
N = length of above lists
C = capacity of bag

// f(W,P,C,N) = 
f(W,P,C,N) = {
    if(C==0 || N==0) {
        return 0;
    }
    if(C >= W[N]) {
        return max(
            fn(W,P,C-W[N],N), fn(W,P,C,N-1);
        )
    } else {
        return fn(W,P,C,N-1);
    }
}

2) Rod Cutting Problem.
Same as above
